OUTPUT_DIR := ../../aether3d_build

UNAME := $(shell uname)
COMPILER := g++
CCOMPILER := gcc
ENGINE_LIB := libaether3d_linux_null.a
STD_LIB := -std=c++11
INCLUDES := -IInclude -IVideo -ICore -IThirdParty

ifeq ($(UNAME), Darwin)
COMPILER := clang++
CCOMPILER := clang
STD_LIB := -std=c++11 -stdlib=libc++
ENGINE_LIB := libaether3d_osx_null.a
endif

WARNINGS := -Wall -ansi -pedantic
DEFINES := -DRENDERER_NULL

ifeq ($(OS),Windows_NT)
ENGINE_LIB := libaether3d_win_null.a
CCOMPILER := gcc
OUTPUT_DIR := ..\..\aether3d_build
endif

all:
ifeq ($(OS),Windows_NT)
	IF exist $(OUTPUT_DIR) ( echo building ) ELSE ( mkdir $(OUTPUT_DIR) )
endif
ifeq ($(UNAME), Darwin)
	mkdir -p $(OUTPUT_DIR)
	rm -f $(OUTPUT_DIR)/libaether3d_osx_null.a
endif
ifeq ($(UNAME), Linux)
	mkdir -p $(OUTPUT_DIR)
	rm -f $(OUTPUT_DIR)/libaether3d_linux_null.a
endif
	$(CCOMPILER) -c ThirdParty/stb_image.c -o $(OUTPUT_DIR)/stb_image.o
	$(CCOMPILER) -c ThirdParty/stb_vorbis.c -o $(OUTPUT_DIR)/stb_vorbis.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/OculusRiftSupport.cpp -o $(OUTPUT_DIR)/OculusRiftSupportNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/RendererCommon.cpp -o $(OUTPUT_DIR)/RendererCommonNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Null/ShaderNull.cpp -o $(OUTPUT_DIR)/ShaderNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Null/Texture2D_Null.cpp -o $(OUTPUT_DIR)/Texture2D_Null.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Null/TextureCubeNull.cpp -o $(OUTPUT_DIR)/TextureCubeNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/TextureCommon.cpp -o $(OUTPUT_DIR)/TextureCommonNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Material.cpp -o $(OUTPUT_DIR)/MaterialNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Null/VertexBufferNull.cpp -o $(OUTPUT_DIR)/VertexBufferNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Null/GfxDeviceNull.cpp -o $(OUTPUT_DIR)/GfxDeviceNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Null/ComputeShaderNull.cpp -o $(OUTPUT_DIR)/ComputeShaderNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/DirectionalLightComponent.cpp -o $(OUTPUT_DIR)/DirectionalLightComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/SpotLightComponent.cpp -o $(OUTPUT_DIR)/SpotLightComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/PointLightComponent.cpp -o $(OUTPUT_DIR)/PointLightComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/TransformComponent.cpp -o $(OUTPUT_DIR)/TransformComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/SpriteRendererComponent.cpp -o $(OUTPUT_DIR)/SpriteRendererComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/AudioSourceComponent.cpp -o $(OUTPUT_DIR)/AudioSourceComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/MeshRendererComponent.cpp -o $(OUTPUT_DIR)/MeshRendererComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/TextRendererComponent.cpp -o $(OUTPUT_DIR)/TextRendererComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/FileWatcher.cpp -o $(OUTPUT_DIR)/FileWatcherNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/Font.cpp -o $(OUTPUT_DIR)/FontNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/MathUtil.cpp -o $(OUTPUT_DIR)/MathUtil.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/Mesh.cpp -o $(OUTPUT_DIR)/MeshNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/AudioClip.cpp -o $(OUTPUT_DIR)/AudioClipNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/AudioSystemOpenAL.cpp -o $(OUTPUT_DIR)/AudioSystemOpenALNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/Matrix.cpp -o $(OUTPUT_DIR)/MatrixNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/Scene.cpp -o $(OUTPUT_DIR)/SceneNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/System.cpp -o $(OUTPUT_DIR)/SystemNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/FileSystem.cpp -o $(OUTPUT_DIR)/FileSystemNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Core/Frustum.cpp -o $(OUTPUT_DIR)/FrustumNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/GameObject.cpp -o $(OUTPUT_DIR)/GameObjectNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Components/CameraComponent.cpp -o $(OUTPUT_DIR)/CameraComponentNull.o
	$(COMPILER) $(INCLUDES) $(WARNINGS) $(STD_LIB) $(DEFINES) -c Video/Null/WindowNull.cpp -o $(OUTPUT_DIR)/WindowNull.o
	ar rcs $(OUTPUT_DIR)/$(ENGINE_LIB) $(OUTPUT_DIR)/*.o
ifeq ($(UNAME), Linux)
	rm $(OUTPUT_DIR)/*.o
endif
ifeq ($(UNAME), Darwin)
	rm $(OUTPUT_DIR)/*.o
endif
ifeq ($(OS),Windows_NT)
	del $(OUTPUT_DIR)\*.o
endif

